//Minimize Malware Spread
//https://leetcode.com/problems/minimize-malware-spread/

class Solution {
    public int minMalwareSpread(int[][] graph, int[] initial) {
        parent = new int[graph.length];
        size = new int[graph.length];
        
        for(int i = 0; i < graph.length; i++){
            parent[i] = i;
            size[i] = 1;
        }
        
        for(int i = 0; i < graph.length; i++){
            for(int j = 0; j < graph.length; j++){
                if(i != j && graph[i][j] == 1){
                    unionHelper(i, j);
                }
            }
        }
        
        int[] imap = new int[graph.length];
        for(int i: initial){
            int ri = find(i);
            imap[ri]++;
        }
        
        Arrays.sort(initial);
        
        int ans_i = initial[0];
        int ans_size = 0;
        
        for(int i : initial){
            int ri = find(i);
            if(imap[ri] == 1){
                if(size[ri] > ans_size){
                    ans_i = i;
                    ans_size = size[ri];
                }
            }
        }
        
        return ans_i;
    }
    
    int[] parent;
    int[] size;
    
    int find(int x){
        if(parent[x] == x){
            return x;
        } else {
            parent[x] = find(parent[x]);
            return parent[x];
        }
    }
    
    void unionHelper(int x, int y){
        int xl = find(x);
        int yl = find(y);
        
        if(size[xl] < size[yl]){
            parent[xl] = yl;
            size[yl] += size[xl];
        } else {
            parent[yl] = xl;
            size[xl] += size[yl];
        }
    }
}